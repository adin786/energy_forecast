# https://towardsaws.com/build-push-docker-image-to-aws-ecr-using-github-actions-8396888a8f9e

name: Deploy to Lambda

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  test:
    name: Run test suite
    runs-on: ubuntu-latest
    steps:

    - name: Checkout Repo
      uses: actions/checkout@v3

    - uses: actions/setup-python@v4 
      with:
        python-version: '3.9.13' 

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Set up DVC
      uses: iterative/setup-dvc@v1

    - name: DVC pull files
      run: |
        dvc pull

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install .

    - name: Run pre-commit hooks
      run: |
        pre-commit install
        pre-commit run --all-files

  build:
    name: Docker build and push to ECR
    runs-on: ubuntu-latest
    needs: test
    steps:

    - name: Checkout Repo
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Set up DVC
      uses: iterative/setup-dvc@v1

    - name: DVC pull model files
      run: |
        dvc pull models.dvc 

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build docker image
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $REGISTRY/$REPOSITORY -f Dockerfile.lambda .

    - name: Tag and push to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker push $REGISTRY/$REPOSITORY
        docker tag $REGISTRY/$REPOSITORY $REGISTRY/$REPOSITORY:$IMAGE_TAG
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  deploy:
    name: Deploy resources with terraform
    runs-on: ubuntu-latest
    needs: [test, build]
    steps:

    - name: Checkout Repo
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      
    - name: Terraform Setup
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.3
        terraform_wrapper: true
      
    - name: Terraform Init
      run: terraform init
      
    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      
    - run: echo "${{ steps.plan.outputs.stdout }}" | tail -c 60000
    - run: echo "${{ steps.plan.outputs.stderr }}" | tail -c 60000
    - run: echo "${{ steps.plan.outputs.exitcode }}" | tail -c 60000
      
    - name: Terraform Apply
      id: apply
      run: terraform apply -no-color -auto-approve